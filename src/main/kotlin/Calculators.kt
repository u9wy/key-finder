import java.math.BigDecimal
import java.math.BigInteger

val addresses =
    "0000000000000000000000000000000000000000000000000000000000000001\n" +
            "0000000000000000000000000000000000000000000000000000000000000003\n" +
            "0000000000000000000000000000000000000000000000000000000000000007\n" +
            "0000000000000000000000000000000000000000000000000000000000000008\n" +
            "0000000000000000000000000000000000000000000000000000000000000015\n" +
            "0000000000000000000000000000000000000000000000000000000000000031\n" +
            "000000000000000000000000000000000000000000000000000000000000004c\n" +
            "00000000000000000000000000000000000000000000000000000000000000e0\n" +
            "00000000000000000000000000000000000000000000000000000000000001d3\n" +
            "0000000000000000000000000000000000000000000000000000000000000202\n" +
            "0000000000000000000000000000000000000000000000000000000000000483\n" +
            "0000000000000000000000000000000000000000000000000000000000000a7b\n" +
            "0000000000000000000000000000000000000000000000000000000000001460\n" +
            "0000000000000000000000000000000000000000000000000000000000002930\n" +
            "00000000000000000000000000000000000000000000000000000000000068f3\n" +
            "000000000000000000000000000000000000000000000000000000000000c936\n" +
            "000000000000000000000000000000000000000000000000000000000001764f\n" +
            "000000000000000000000000000000000000000000000000000000000003080d\n" +
            "000000000000000000000000000000000000000000000000000000000005749f\n" +
            "00000000000000000000000000000000000000000000000000000000000d2c55\n" +
            "00000000000000000000000000000000000000000000000000000000001ba534\n" +
            "00000000000000000000000000000000000000000000000000000000002de40f\n" +
            "0000000000000000000000000000000000000000000000000000000000556e52\n" +
            "0000000000000000000000000000000000000000000000000000000000dc2a04\n" +
            "0000000000000000000000000000000000000000000000000000000001fa5ee5\n" +
            "000000000000000000000000000000000000000000000000000000000340326e\n" +
            "0000000000000000000000000000000000000000000000000000000006ac3875\n" +
            "000000000000000000000000000000000000000000000000000000000d916ce8\n" +
            "0000000000000000000000000000000000000000000000000000000017e2551e\n" +
            "000000000000000000000000000000000000000000000000000000003d94cd64\n" +
            "000000000000000000000000000000000000000000000000000000007d4fe747\n" +
            "00000000000000000000000000000000000000000000000000000000b862a62e\n" +
            "00000000000000000000000000000000000000000000000000000001a96ca8d8\n" +
            "000000000000000000000000000000000000000000000000000000034a65911d\n" +
            "00000000000000000000000000000000000000000000000000000004aed21170\n" +
            "00000000000000000000000000000000000000000000000000000009de820a7c\n" +
            "0000000000000000000000000000000000000000000000000000001757756a93\n" +
            "00000000000000000000000000000000000000000000000000000022382facd0\n" +
            "0000000000000000000000000000000000000000000000000000004b5f8303e9\n" +
            "000000000000000000000000000000000000000000000000000000e9ae4933d6\n" +
            "00000000000000000000000000000000000000000000000000000153869acc5b\n" +
            "000000000000000000000000000000000000000000000000000002a221c58d8f\n" +
            "000000000000000000000000000000000000000000000000000006bd3b27c591\n" +
            "00000000000000000000000000000000000000000000000000000e02b35a358f\n" +
            "0000000000000000000000000000000000000000000000000000122fca143c05\n" +
            "00000000000000000000000000000000000000000000000000002ec18388d544\n" +
            "00000000000000000000000000000000000000000000000000006cd610b53cba\n" +
            "0000000000000000000000000000000000000000000000000000ade6d7ce3b9b\n" +
            "000000000000000000000000000000000000000000000000000174176b015f4d\n" +
            "00000000000000000000000000000000000000000000000000022bd43c2e9354\n" +
            "00000000000000000000000000000000000000000000000000075070a1a009d4\n" +
            "000000000000000000000000000000000000000000000000000efae164cb9e3c\n" +
            "00000000000000000000000000000000000000000000000000180788e47e326c\n" +
            "00000000000000000000000000000000000000000000000000236fb6d5ad1f43\n" +
            "000000000000000000000000000000000000000000000000006abe1f9b67e114\n" +
            "000000000000000000000000000000000000000000000000009d18b63ac4ffdf\n" +
            "00000000000000000000000000000000000000000000000001eb25c90795d61c\n" +
            "00000000000000000000000000000000000000000000000002c675b852189a21\n" +
            "00000000000000000000000000000000000000000000000007496cbb87cab44f\n" +
            "0000000000000000000000000000000000000000000000000fc07a1825367bbe\n" +
            "00000000000000000000000000000000000000000000000013c96a3742f64906\n" +
            "000000000000000000000000000000000000000000000000363d541eb611abee\n" +
            "0000000000000000000000000000000000000000000000007cce5efdaccf6808\n" +
            "000000000000000000000000000000000000000000000000f7051f27b09112d4\n" +
            "000000000000000000000000000000000000000000000001a838b13505b26867"
//            "0000000000000000000000000000000000000000000000349b84b6431a6c4ef1\n" +
//            "0000000000000000000000000000000000000000000004c5ce114686a1336e07\n" +
//            "00000000000000000000000000000000000000000000ea1a5c66dcc11b5ad180\n" +
//            "00000000000000000000000000000000000000000011720c4f018d51b8cebba8\n" +
//            "000000000000000000000000000000000000000002ce00bb2136a445c71e85bf\n" +
//            "0000000000000000000000000000000000000000527a792b183c7f64a0e8b1f4\n" +
//            "000000000000000000000000000000000000000af55fc59c335c8ec67ed24826\n" +
//            "000000000000000000000000000000000000016f14fc2054cd87ee6396b33df3\n" +
//            "00000000000000000000000000000000000035c0d7234df7deb0f20cf7062444\n" +
//            "0000000000000000000000000000000000060f4d11574f5deee49961d9609ac6"

fun logarithmicFormula(x: BigInteger): BigDecimal {
    // Adjustment factor derived from the provided scale
    val adjustment = BigDecimal("1.65665").multiply(BigInteger.TWO.pow(x.toInt()).toBigDecimal())

    return adjustment
}

var list = addresses.split("\n")
    .map { it.toBigInteger(16) }

fun findAdjustment(targetValue : BigDecimal, exponent : Int, initialAdjustment :BigDecimal = "0.000000001".toBigDecimal()): Pair<BigDecimal, BigDecimal> {

    var adjustment = initialAdjustment.toString().toBigDecimal()
    fun calculateValue() = adjustment.multiply(BigInteger.TWO.pow(exponent).toBigDecimal())


    var calculatedValue =  calculateValue()
    if(calculatedValue > targetValue){
        while(calculatedValue > targetValue){
            adjustment -= "0.000000001".toBigDecimal()
            calculatedValue = calculateValue()
        }
    } else {
        while (calculatedValue < targetValue) {
            adjustment += "0.000000001".toBigDecimal()
            calculatedValue = calculateValue()
        }
    }

    return Pair(calculatedValue,adjustment)
}

fun main(){

    var currentAdjustment = "0.000000001".toBigDecimal()

    list.forEachIndexed { i,it ->
        val pair = findAdjustment(it.toBigDecimal(),i,currentAdjustment)
        currentAdjustment = pair.second
        println("f($i) = ${pair.second}  calculatedKey: ${pair.first.toBigInteger()} correctKey:$it")
    }
}

//fun main() {
//
//    var adjustment = (1.65665).toBigDecimal()
//    var value =  adjustment.multiply(BigInteger.TWO.pow(64.toInt()).toBigDecimal())
//
//    while(value <= "30568377312064202855".toBigDecimal()){
//        value = adjustment.multiply(BigInteger.TWO.pow(64.toInt()).toBigDecimal())
//        adjustment += "0.000000000001".toBigDecimal()
//    }
//
//    println(adjustment)
//    println("$value     ${list.last()}")
//
//
//    for (x in 0..64) {
//        println("f($x) = ${"1.65711505457".toBigDecimal().multiply(BigInteger.TWO.pow(x).toBigDecimal())}    ${list[x]}")
//    }
//}